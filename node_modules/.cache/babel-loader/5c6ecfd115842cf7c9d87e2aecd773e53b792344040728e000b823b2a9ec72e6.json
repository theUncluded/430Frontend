{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cameron\\\\Documents\\\\GitHub\\\\430Frontend\\\\src\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { UserContext } from './UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    currentUserId\n  } = useContext(UserContext);\n  const [cartItems, setCartItems] = useState([]);\n\n  // Persist cart to local storage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // Initialize cart from local storage on app load\n  useEffect(() => {\n    const savedCart = JSON.parse(localStorage.getItem('cartItems'));\n    console.log(\"Loaded cart from localStorage:\", savedCart); // Debug log\n    if (savedCart) {\n      setCartItems(savedCart);\n    }\n  }, []);\n  useEffect(() => {\n    if (currentUserId && cartItems.length > 0) {\n      console.log('Cart items changed, saving to DB:', cartItems); // Debug log\n      saveCartToDB(); // Save updated cart to the database\n    }\n  }, [cartItems, currentUserId]); // Trigger whenever `cartItems` or `currentUserId` changes\n\n  const addToCart = product => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item.product_id === product.product_id);\n      if (existingItem) {\n        return prevItems.map(item => item.product_id === product.product_id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      } else {\n        return [...prevItems, {\n          ...product,\n          quantity: 1\n        }];\n      }\n    });\n  };\n  const updateItemQuantity = (productId, quantity) => {\n    setCartItems(prevItems => prevItems.map(item => item.product_id === productId ? {\n      ...item,\n      quantity\n    } : item));\n  };\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.product_id !== productId));\n  };\n\n  // Save the cart to the database\n  const saveCartToDB = async () => {\n    console.log('Attempting to save cart to DB:', cartItems); // Log cart items being sent\n    if (!currentUserId) {\n      console.error('No user ID found, skipping save.');\n      return;\n    }\n    try {\n      const response = await fetch('https://four30finalback-1.onrender.com/cart/save', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: currentUserId,\n          cart_items: cartItems\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error saving cart: ${response.statusText}`);\n      }\n      console.log('Cart saved to database successfully.');\n    } catch (error) {\n      console.error('Error saving cart to database:', error);\n    }\n  };\n\n  // Fetch the cart from the database when the user logs in\n  const fetchCartFromDB = async () => {\n    if (!currentUserId) return;\n    try {\n      const response = await fetch(`https://four30finalback-1.onrender.com/cart/${currentUserId}`);\n      if (!response.ok) throw new Error('Failed to fetch cart from DB');\n      const data = await response.json();\n      setCartItems(data);\n    } catch (error) {\n      console.error(\"Error fetching cart from database:\", error);\n    }\n  };\n\n  // Merge local cart and backend cart (prioritize local cart quantities)\n  const mergeCarts = (backendCart, localCart) => {\n    const merged = [...backendCart];\n    localCart.forEach(localItem => {\n      const existingItem = merged.find(item => item.product_id === localItem.product_id);\n      if (existingItem) {\n        existingItem.quantity = localItem.quantity; // Prioritize local quantity\n      } else {\n        merged.push(localItem);\n      }\n    });\n    return merged;\n  };\n\n  // Checkout function that deducts stock from the database\n  const checkout = async () => {\n    try {\n      const response = await fetch('https://four30finalback-1.onrender.com/checkout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: currentUserId,\n          cart_items: cartItems\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        alert(data.message);\n        setCartItems([]); // Clear cart on successful checkout\n        localStorage.removeItem('cart'); // Clear local storage\n      } else {\n        alert(data.message || \"Checkout failed.\");\n      }\n    } catch (error) {\n      console.error(\"Checkout error:\", error);\n      alert(\"An error occurred during checkout.\");\n    }\n  };\n\n  // Sync cart with backend when user logs in\n  useEffect(() => {\n    if (currentUserId) {\n      fetchCartFromDB();\n    }\n  }, [currentUserId]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      updateItemQuantity,\n      removeFromCart,\n      fetchCartFromDB,\n      checkout,\n      saveCartToDB\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n_s2(CartProvider, \"wKkQ0/Ic39hrO8pTXA5nuO/sFVk=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","UserContext","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","currentUserId","cartItems","setCartItems","localStorage","setItem","JSON","stringify","savedCart","parse","getItem","console","log","length","saveCartToDB","addToCart","product","prevItems","existingItem","find","item","product_id","map","quantity","updateItemQuantity","productId","removeFromCart","filter","error","response","fetch","method","headers","body","user_id","cart_items","ok","Error","statusText","fetchCartFromDB","data","json","mergeCarts","backendCart","localCart","merged","forEach","localItem","push","checkout","success","alert","message","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Cameron/Documents/GitHub/430Frontend/src/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { UserContext } from './UserContext';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const useCart = () => useContext(CartContext);\r\n\r\nexport const CartProvider = ({ children }) => {\r\n    const { currentUserId } = useContext(UserContext);\r\n    const [cartItems, setCartItems] = useState([]);\r\n\r\n    // Persist cart to local storage whenever it changes\r\n    useEffect(() => {\r\n        localStorage.setItem('cart', JSON.stringify(cartItems));\r\n    }, [cartItems]);\r\n\r\n    // Initialize cart from local storage on app load\r\n    useEffect(() => {\r\n        const savedCart = JSON.parse(localStorage.getItem('cartItems'));\r\n        console.log(\"Loaded cart from localStorage:\", savedCart); // Debug log\r\n        if (savedCart) {\r\n            setCartItems(savedCart);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (currentUserId && cartItems.length > 0) {\r\n            console.log('Cart items changed, saving to DB:', cartItems); // Debug log\r\n            saveCartToDB(); // Save updated cart to the database\r\n        }\r\n    }, [cartItems, currentUserId]); // Trigger whenever `cartItems` or `currentUserId` changes\r\n    \r\n    const addToCart = (product) => {\r\n        setCartItems((prevItems) => {\r\n            const existingItem = prevItems.find(item => item.product_id === product.product_id);\r\n            if (existingItem) {\r\n                return prevItems.map(item =>\r\n                    item.product_id === product.product_id\r\n                        ? { ...item, quantity: item.quantity + 1 }\r\n                        : item\r\n                );\r\n            } else {\r\n                return [...prevItems, { ...product, quantity: 1 }];\r\n            }\r\n        });\r\n    };\r\n\r\n    const updateItemQuantity = (productId, quantity) => {\r\n        setCartItems((prevItems) =>\r\n            prevItems.map((item) =>\r\n                item.product_id === productId ? { ...item, quantity } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    const removeFromCart = (productId) => {\r\n        setCartItems((prevItems) => prevItems.filter((item) => item.product_id !== productId));\r\n    };\r\n\r\n    // Save the cart to the database\r\n    const saveCartToDB = async () => {\r\n        console.log('Attempting to save cart to DB:', cartItems); // Log cart items being sent\r\n        if (!currentUserId) {\r\n            console.error('No user ID found, skipping save.');\r\n            return;\r\n        }\r\n    \r\n        try {\r\n            const response = await fetch('https://four30finalback-1.onrender.com/cart/save', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    user_id: currentUserId,\r\n                    cart_items: cartItems,\r\n                }),\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error(`Error saving cart: ${response.statusText}`);\r\n            }\r\n    \r\n            console.log('Cart saved to database successfully.');\r\n        } catch (error) {\r\n            console.error('Error saving cart to database:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    // Fetch the cart from the database when the user logs in\r\n    const fetchCartFromDB = async () => {\r\n        if (!currentUserId) return;\r\n    \r\n        try {\r\n            const response = await fetch(`https://four30finalback-1.onrender.com/cart/${currentUserId}`);\r\n            if (!response.ok) throw new Error('Failed to fetch cart from DB');\r\n            const data = await response.json();\r\n            setCartItems(data);\r\n        } catch (error) {\r\n            console.error(\"Error fetching cart from database:\", error);\r\n        }\r\n    };\r\n    \r\n\r\n    // Merge local cart and backend cart (prioritize local cart quantities)\r\n    const mergeCarts = (backendCart, localCart) => {\r\n        const merged = [...backendCart];\r\n\r\n        localCart.forEach((localItem) => {\r\n            const existingItem = merged.find(item => item.product_id === localItem.product_id);\r\n            if (existingItem) {\r\n                existingItem.quantity = localItem.quantity; // Prioritize local quantity\r\n            } else {\r\n                merged.push(localItem);\r\n            }\r\n        });\r\n\r\n        return merged;\r\n    };\r\n\r\n    // Checkout function that deducts stock from the database\r\n    const checkout = async () => {\r\n        try {\r\n            const response = await fetch('https://four30finalback-1.onrender.com/checkout', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ user_id: currentUserId, cart_items: cartItems })\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                alert(data.message);\r\n                setCartItems([]); // Clear cart on successful checkout\r\n                localStorage.removeItem('cart'); // Clear local storage\r\n            } else {\r\n                alert(data.message || \"Checkout failed.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Checkout error:\", error);\r\n            alert(\"An error occurred during checkout.\");\r\n        }\r\n    };\r\n\r\n    // Sync cart with backend when user logs in\r\n    useEffect(() => {\r\n        if (currentUserId) {\r\n            fetchCartFromDB();\r\n        }\r\n    }, [currentUserId]);\r\n\r\n    return (\r\n        <CartContext.Provider\r\n            value={{\r\n                cartItems,\r\n                addToCart,\r\n                updateItemQuantity,\r\n                removeFromCart,\r\n                fetchCartFromDB,\r\n                checkout,\r\n                saveCartToDB,\r\n            }}\r\n        >\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}